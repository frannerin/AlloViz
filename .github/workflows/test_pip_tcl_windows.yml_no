name: Windows Python Package using pip and tcl

on:
  push:
    branches:
      - reg_test
      - fix_submodules

jobs:
  job:
    name: pip tcl windows
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        symbols:
          - "no"

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    # - name: Set up Python
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: "3.10.6"
    #     cache: "pip"
    #     cache-dependency-path: dev/dev_env.txt
    # THIS DOESN'T DO ANYTHING AS WE ARE USING MSYS2 AS SHELL


    # TCL IN WINDOWS
    - name: Install MSYS2
      uses: msys2/setup-msys2@v2
      with:
        #msystem: MINGW64
        install: git make zlib base-devel # INCLUDED ZLIB and pip
        pacboy: toolchain:p gcc:p python-pip:p openblas:p python-numpy:p python:p
    - name: Checkout Tk
      uses: actions/checkout@v3
      with:
        repository: tcltk/tk
        ref: core-8-5-branch
        path: tk
    - name: Checkout Tcl
      uses: actions/checkout@v3
      with:
        repository: tcltk/tcl
        ref: core-8-5-branch
        path: tcl
    - name: Prepare
      run: |
        touch tkStubInit.c
        mkdir "${HOME}/install_dir"
        echo "INSTALL_DIR=${HOME}/install_dir" >> $GITHUB_ENV
      working-directory: tk/generic
    - name: Configure and Build Tcl
      run: |
        ./configure ${CFGOPT} "--prefix=$INSTALL_DIR" || {
          cat config.log
          echo "::warning::Failure during Tcl Configure"
          exit 1
        }
        make all install  || {
          echo "::warning::Failure during Tcl Build"
          exit 1
        }
        echo "TCL_CONFIG_PATH=`pwd`" >> $GITHUB_ENV
      env:
        CFGOPT: --enable-64bit --enable-symbols=${{ matrix.symbols }}
      working-directory: tcl/win
    - name: Configure (symbols=${{ matrix.symbols }})
      run: |
        ./configure ${CFGOPT} "--prefix=$HOME/INSTALL_DIR" "--with-tcl=$TCL_CONFIG_PATH" || {
          cat config.log
          echo "::error::Failure during Configure"
          exit 1
        }
      env:
        CFGOPT: --enable-64bit --enable-symbols=${{ matrix.symbols }}
      working-directory: tk/win
    - name: Build
      run: |
        make all tktest || {
          echo "::error::Failure during Build"
          exit 1
        }
        make install || {
          echo "::error::Failure during Build"
          exit 1
        }
      working-directory: tk/win




    # - name: Cache pip deps
    #   uses: actions/cache@v3
    #   with:
    #     path: ${{ env.pythonLocation }}
    #     key:
    #       ${{ env.pythonLocation }}-pip-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('dev/dev_env.txt') }}-${{ env.CACHE_NUMBER }}
    #   env:
    #     # Increase this value to reset cache if has not changed
    #     CACHE_NUMBER: 0
    #   id: cache


    - name: Install dependencies
      # python -m 
      # pip install -U --upgrade-strategy eager "numpy>=1.22.4,<1.22.5" 
      run: |
        D:/a/_temp/msys64/mingw64/bin/python.exe -m pip install -U --upgrade-strategy eager pip setuptools wheel
        D:/a/_temp/msys64/mingw64/bin/python.exe -m pip install -r dev/dev_env.txt

    # - name: Update environment
    #   run:
    #     mamba env update -n anaconda-client-env -f dev/dev_env_out.yml
    #   if: steps.cache.outputs.cache-hit != 'true'

    - name: Install AlloViz
      run: pip install .

    # - name: Lint with flake8
    #   run: |
    #     conda install flake8
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: pytest test